
blink_rtos_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002504  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002614  08002614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002674  08002674  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002674  08002674  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002674  08002674  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002674  08002674  00012674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800267c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc4  20000010  0800268c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fd4  0800268c  00020fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093ae  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bdb  00000000  00000000  000293e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000878  00000000  00000000  0002afc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000790  00000000  00000000  0002b840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013d34  00000000  00000000  0002bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075ce  00000000  00000000  0003fd04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006efe7  00000000  00000000  000472d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b62b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002034  00000000  00000000  000b6334  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080025fc 	.word	0x080025fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080025fc 	.word	0x080025fc

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b08a      	sub	sp, #40	; 0x28
 8000184:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 f97b 	bl	8000480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f82b 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f865 	bl	800025c <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000192:	4b10      	ldr	r3, [pc, #64]	; (80001d4 <main+0x54>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2100      	movs	r1, #0
 80001a8:	4618      	mov	r0, r3
 80001aa:	f001 f841 	bl	8001230 <osThreadCreate>
 80001ae:	4602      	mov	r2, r0
 80001b0:	4b09      	ldr	r3, [pc, #36]	; (80001d8 <main+0x58>)
 80001b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001b4:	f001 f835 	bl	8001222 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  xTaskCreate(blink_function, "PC13_Blink", 100, NULL, 1, NULL);
 80001b8:	2300      	movs	r3, #0
 80001ba:	9301      	str	r3, [sp, #4]
 80001bc:	2301      	movs	r3, #1
 80001be:	9300      	str	r3, [sp, #0]
 80001c0:	2300      	movs	r3, #0
 80001c2:	2264      	movs	r2, #100	; 0x64
 80001c4:	4905      	ldr	r1, [pc, #20]	; (80001dc <main+0x5c>)
 80001c6:	4806      	ldr	r0, [pc, #24]	; (80001e0 <main+0x60>)
 80001c8:	f001 f99a 	bl	8001500 <xTaskCreate>
  vTaskStartScheduler();
 80001cc:	f001 fafa 	bl	80017c4 <vTaskStartScheduler>
  while (1)
 80001d0:	e7fe      	b.n	80001d0 <main+0x50>
 80001d2:	bf00      	nop
 80001d4:	0800262c 	.word	0x0800262c
 80001d8:	20000fcc 	.word	0x20000fcc
 80001dc:	08002614 	.word	0x08002614
 80001e0:	080002e1 	.word	0x080002e1

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b090      	sub	sp, #64	; 0x40
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0318 	add.w	r3, r7, #24
 80001ee:	2228      	movs	r2, #40	; 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f002 f9fa 	bl	80025ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000206:	2302      	movs	r3, #2
 8000208:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020a:	2301      	movs	r3, #1
 800020c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020e:	2310      	movs	r3, #16
 8000210:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000212:	2300      	movs	r3, #0
 8000214:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fc00 	bl	8000a20 <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000226:	f000 f855 	bl	80002d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fe6c 	bl	8000f20 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800024e:	f000 f841 	bl	80002d4 <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	; 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b086      	sub	sp, #24
 8000260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000262:	f107 0308 	add.w	r3, r7, #8
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <MX_GPIO_Init+0x60>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a11      	ldr	r2, [pc, #68]	; (80002bc <MX_GPIO_Init+0x60>)
 8000276:	f043 0310 	orr.w	r3, r3, #16
 800027a:	6193      	str	r3, [r2, #24]
 800027c:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <MX_GPIO_Init+0x60>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f003 0310 	and.w	r3, r3, #16
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028e:	480c      	ldr	r0, [pc, #48]	; (80002c0 <MX_GPIO_Init+0x64>)
 8000290:	f000 fb96 	bl	80009c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000298:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029a:	2301      	movs	r3, #1
 800029c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a2:	2302      	movs	r3, #2
 80002a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002a6:	f107 0308 	add.w	r3, r7, #8
 80002aa:	4619      	mov	r1, r3
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <MX_GPIO_Init+0x64>)
 80002ae:	f000 fa2d 	bl	800070c <HAL_GPIO_Init>

}
 80002b2:	bf00      	nop
 80002b4:	3718      	adds	r7, #24
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40021000 	.word	0x40021000
 80002c0:	40011000 	.word	0x40011000

080002c4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80002cc:	2001      	movs	r0, #1
 80002ce:	f000 fffb 	bl	80012c8 <osDelay>
 80002d2:	e7fb      	b.n	80002cc <StartDefaultTask+0x8>

080002d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <blink_function>:

void blink_function(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
	 while (1)
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ea:	4807      	ldr	r0, [pc, #28]	; (8000308 <blink_function+0x28>)
 80002ec:	f000 fb80 	bl	80009f0 <HAL_GPIO_TogglePin>
		  		for(int x=0; x<80000;x++);
 80002f0:	2300      	movs	r3, #0
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	e002      	b.n	80002fc <blink_function+0x1c>
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3301      	adds	r3, #1
 80002fa:	607b      	str	r3, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a03      	ldr	r2, [pc, #12]	; (800030c <blink_function+0x2c>)
 8000300:	4293      	cmp	r3, r2
 8000302:	ddf8      	ble.n	80002f6 <blink_function+0x16>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000304:	e7ef      	b.n	80002e6 <blink_function+0x6>
 8000306:	bf00      	nop
 8000308:	40011000 	.word	0x40011000
 800030c:	0001387f 	.word	0x0001387f

08000310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <HAL_MspInit+0x68>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	4a17      	ldr	r2, [pc, #92]	; (8000378 <HAL_MspInit+0x68>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6193      	str	r3, [r2, #24]
 8000322:	4b15      	ldr	r3, [pc, #84]	; (8000378 <HAL_MspInit+0x68>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <HAL_MspInit+0x68>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	4a11      	ldr	r2, [pc, #68]	; (8000378 <HAL_MspInit+0x68>)
 8000334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000338:	61d3      	str	r3, [r2, #28]
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <HAL_MspInit+0x68>)
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000346:	2200      	movs	r2, #0
 8000348:	210f      	movs	r1, #15
 800034a:	f06f 0001 	mvn.w	r0, #1
 800034e:	f000 f9b4 	bl	80006ba <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000352:	4b0a      	ldr	r3, [pc, #40]	; (800037c <HAL_MspInit+0x6c>)
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	4a04      	ldr	r2, [pc, #16]	; (800037c <HAL_MspInit+0x6c>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800036e:	bf00      	nop
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40010000 	.word	0x40010000

08000380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000390:	e7fe      	b.n	8000390 <HardFault_Handler+0x4>

08000392 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000396:	e7fe      	b.n	8000396 <MemManage_Handler+0x4>

08000398 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800039c:	e7fe      	b.n	800039c <BusFault_Handler+0x4>

0800039e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <UsageFault_Handler+0x4>

080003a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b4:	f000 f8aa 	bl	800050c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80003b8:	f001 fcf8 	bl	8001dac <xTaskGetSchedulerState>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d001      	beq.n	80003c6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80003c2:	f001 fed9 	bl	8002178 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <SystemInit+0x5c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a14      	ldr	r2, [pc, #80]	; (8000428 <SystemInit+0x5c>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <SystemInit+0x5c>)
 80003de:	685a      	ldr	r2, [r3, #4]
 80003e0:	4911      	ldr	r1, [pc, #68]	; (8000428 <SystemInit+0x5c>)
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <SystemInit+0x60>)
 80003e4:	4013      	ands	r3, r2
 80003e6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <SystemInit+0x5c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <SystemInit+0x5c>)
 80003ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <SystemInit+0x5c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <SystemInit+0x5c>)
 80003fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000402:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <SystemInit+0x5c>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <SystemInit+0x5c>)
 800040a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800040e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <SystemInit+0x5c>)
 8000412:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000416:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <SystemInit+0x64>)
 800041a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800041e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000
 800042c:	f8ff0000 	.word	0xf8ff0000
 8000430:	e000ed00 	.word	0xe000ed00

08000434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000434:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000436:	e003      	b.n	8000440 <LoopCopyDataInit>

08000438 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800043a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800043c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800043e:	3104      	adds	r1, #4

08000440 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000440:	480a      	ldr	r0, [pc, #40]	; (800046c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000444:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000446:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000448:	d3f6      	bcc.n	8000438 <CopyDataInit>
  ldr r2, =_sbss
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800044c:	e002      	b.n	8000454 <LoopFillZerobss>

0800044e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000450:	f842 3b04 	str.w	r3, [r2], #4

08000454 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000456:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000458:	d3f9      	bcc.n	800044e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800045a:	f7ff ffb7 	bl	80003cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800045e:	f002 f8a1 	bl	80025a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000462:	f7ff fe8d 	bl	8000180 <main>
  bx lr
 8000466:	4770      	bx	lr
  ldr r3, =_sidata
 8000468:	0800267c 	.word	0x0800267c
  ldr r0, =_sdata
 800046c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000470:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000474:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000478:	20000fd4 	.word	0x20000fd4

0800047c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800047c:	e7fe      	b.n	800047c <ADC1_2_IRQHandler>
	...

08000480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <HAL_Init+0x28>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a07      	ldr	r2, [pc, #28]	; (80004a8 <HAL_Init+0x28>)
 800048a:	f043 0310 	orr.w	r3, r3, #16
 800048e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000490:	2003      	movs	r0, #3
 8000492:	f000 f907 	bl	80006a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000496:	200f      	movs	r0, #15
 8000498:	f000 f808 	bl	80004ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800049c:	f7ff ff38 	bl	8000310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40022000 	.word	0x40022000

080004ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <HAL_InitTick+0x54>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <HAL_InitTick+0x58>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4619      	mov	r1, r3
 80004be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80004c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 f911 	bl	80006f2 <HAL_SYSTICK_Config>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004d6:	2301      	movs	r3, #1
 80004d8:	e00e      	b.n	80004f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b0f      	cmp	r3, #15
 80004de:	d80a      	bhi.n	80004f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004e0:	2200      	movs	r2, #0
 80004e2:	6879      	ldr	r1, [r7, #4]
 80004e4:	f04f 30ff 	mov.w	r0, #4294967295
 80004e8:	f000 f8e7 	bl	80006ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <HAL_InitTick+0x5c>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004f2:	2300      	movs	r3, #0
 80004f4:	e000      	b.n	80004f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004f6:	2301      	movs	r3, #1
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000000 	.word	0x20000000
 8000504:	20000008 	.word	0x20000008
 8000508:	20000004 	.word	0x20000004

0800050c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <HAL_IncTick+0x1c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	4b05      	ldr	r3, [pc, #20]	; (800052c <HAL_IncTick+0x20>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4413      	add	r3, r2
 800051c:	4a03      	ldr	r2, [pc, #12]	; (800052c <HAL_IncTick+0x20>)
 800051e:	6013      	str	r3, [r2, #0]
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	20000008 	.word	0x20000008
 800052c:	20000fd0 	.word	0x20000fd0

08000530 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return uwTick;
 8000534:	4b02      	ldr	r3, [pc, #8]	; (8000540 <HAL_GetTick+0x10>)
 8000536:	681b      	ldr	r3, [r3, #0]
}
 8000538:	4618      	mov	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	20000fd0 	.word	0x20000fd0

08000544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f003 0307 	and.w	r3, r3, #7
 8000552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <__NVIC_SetPriorityGrouping+0x44>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000560:	4013      	ands	r3, r2
 8000562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800056c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000576:	4a04      	ldr	r2, [pc, #16]	; (8000588 <__NVIC_SetPriorityGrouping+0x44>)
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	60d3      	str	r3, [r2, #12]
}
 800057c:	bf00      	nop
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	f003 0307 	and.w	r3, r3, #7
}
 800059a:	4618      	mov	r0, r3
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db0a      	blt.n	80005d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	490c      	ldr	r1, [pc, #48]	; (80005f4 <__NVIC_SetPriority+0x4c>)
 80005c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c6:	0112      	lsls	r2, r2, #4
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	440b      	add	r3, r1
 80005cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d0:	e00a      	b.n	80005e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4908      	ldr	r1, [pc, #32]	; (80005f8 <__NVIC_SetPriority+0x50>)
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	f003 030f 	and.w	r3, r3, #15
 80005de:	3b04      	subs	r3, #4
 80005e0:	0112      	lsls	r2, r2, #4
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	440b      	add	r3, r1
 80005e6:	761a      	strb	r2, [r3, #24]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000e100 	.word	0xe000e100
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b089      	sub	sp, #36	; 0x24
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	f1c3 0307 	rsb	r3, r3, #7
 8000616:	2b04      	cmp	r3, #4
 8000618:	bf28      	it	cs
 800061a:	2304      	movcs	r3, #4
 800061c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	3304      	adds	r3, #4
 8000622:	2b06      	cmp	r3, #6
 8000624:	d902      	bls.n	800062c <NVIC_EncodePriority+0x30>
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	3b03      	subs	r3, #3
 800062a:	e000      	b.n	800062e <NVIC_EncodePriority+0x32>
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000630:	f04f 32ff 	mov.w	r2, #4294967295
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	43da      	mvns	r2, r3
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	401a      	ands	r2, r3
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000644:	f04f 31ff 	mov.w	r1, #4294967295
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	fa01 f303 	lsl.w	r3, r1, r3
 800064e:	43d9      	mvns	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	4313      	orrs	r3, r2
         );
}
 8000656:	4618      	mov	r0, r3
 8000658:	3724      	adds	r7, #36	; 0x24
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3b01      	subs	r3, #1
 800066c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000670:	d301      	bcc.n	8000676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000672:	2301      	movs	r3, #1
 8000674:	e00f      	b.n	8000696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <SysTick_Config+0x40>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3b01      	subs	r3, #1
 800067c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800067e:	210f      	movs	r1, #15
 8000680:	f04f 30ff 	mov.w	r0, #4294967295
 8000684:	f7ff ff90 	bl	80005a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <SysTick_Config+0x40>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068e:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <SysTick_Config+0x40>)
 8000690:	2207      	movs	r2, #7
 8000692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	e000e010 	.word	0xe000e010

080006a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff ff49 	bl	8000544 <__NVIC_SetPriorityGrouping>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b086      	sub	sp, #24
 80006be:	af00      	add	r7, sp, #0
 80006c0:	4603      	mov	r3, r0
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	607a      	str	r2, [r7, #4]
 80006c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006cc:	f7ff ff5e 	bl	800058c <__NVIC_GetPriorityGrouping>
 80006d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	68b9      	ldr	r1, [r7, #8]
 80006d6:	6978      	ldr	r0, [r7, #20]
 80006d8:	f7ff ff90 	bl	80005fc <NVIC_EncodePriority>
 80006dc:	4602      	mov	r2, r0
 80006de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff5f 	bl	80005a8 <__NVIC_SetPriority>
}
 80006ea:	bf00      	nop
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ffb0 	bl	8000660 <SysTick_Config>
 8000700:	4603      	mov	r3, r0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800070c:	b480      	push	{r7}
 800070e:	b08b      	sub	sp, #44	; 0x2c
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800071e:	e127      	b.n	8000970 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000720:	2201      	movs	r2, #1
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	fa02 f303 	lsl.w	r3, r2, r3
 8000728:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	69fa      	ldr	r2, [r7, #28]
 8000730:	4013      	ands	r3, r2
 8000732:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000734:	69ba      	ldr	r2, [r7, #24]
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	429a      	cmp	r2, r3
 800073a:	f040 8116 	bne.w	800096a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	2b12      	cmp	r3, #18
 8000744:	d034      	beq.n	80007b0 <HAL_GPIO_Init+0xa4>
 8000746:	2b12      	cmp	r3, #18
 8000748:	d80d      	bhi.n	8000766 <HAL_GPIO_Init+0x5a>
 800074a:	2b02      	cmp	r3, #2
 800074c:	d02b      	beq.n	80007a6 <HAL_GPIO_Init+0x9a>
 800074e:	2b02      	cmp	r3, #2
 8000750:	d804      	bhi.n	800075c <HAL_GPIO_Init+0x50>
 8000752:	2b00      	cmp	r3, #0
 8000754:	d031      	beq.n	80007ba <HAL_GPIO_Init+0xae>
 8000756:	2b01      	cmp	r3, #1
 8000758:	d01c      	beq.n	8000794 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800075a:	e048      	b.n	80007ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800075c:	2b03      	cmp	r3, #3
 800075e:	d043      	beq.n	80007e8 <HAL_GPIO_Init+0xdc>
 8000760:	2b11      	cmp	r3, #17
 8000762:	d01b      	beq.n	800079c <HAL_GPIO_Init+0x90>
          break;
 8000764:	e043      	b.n	80007ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000766:	4a89      	ldr	r2, [pc, #548]	; (800098c <HAL_GPIO_Init+0x280>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d026      	beq.n	80007ba <HAL_GPIO_Init+0xae>
 800076c:	4a87      	ldr	r2, [pc, #540]	; (800098c <HAL_GPIO_Init+0x280>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d806      	bhi.n	8000780 <HAL_GPIO_Init+0x74>
 8000772:	4a87      	ldr	r2, [pc, #540]	; (8000990 <HAL_GPIO_Init+0x284>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d020      	beq.n	80007ba <HAL_GPIO_Init+0xae>
 8000778:	4a86      	ldr	r2, [pc, #536]	; (8000994 <HAL_GPIO_Init+0x288>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d01d      	beq.n	80007ba <HAL_GPIO_Init+0xae>
          break;
 800077e:	e036      	b.n	80007ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000780:	4a85      	ldr	r2, [pc, #532]	; (8000998 <HAL_GPIO_Init+0x28c>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d019      	beq.n	80007ba <HAL_GPIO_Init+0xae>
 8000786:	4a85      	ldr	r2, [pc, #532]	; (800099c <HAL_GPIO_Init+0x290>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d016      	beq.n	80007ba <HAL_GPIO_Init+0xae>
 800078c:	4a84      	ldr	r2, [pc, #528]	; (80009a0 <HAL_GPIO_Init+0x294>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d013      	beq.n	80007ba <HAL_GPIO_Init+0xae>
          break;
 8000792:	e02c      	b.n	80007ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	623b      	str	r3, [r7, #32]
          break;
 800079a:	e028      	b.n	80007ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	3304      	adds	r3, #4
 80007a2:	623b      	str	r3, [r7, #32]
          break;
 80007a4:	e023      	b.n	80007ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	3308      	adds	r3, #8
 80007ac:	623b      	str	r3, [r7, #32]
          break;
 80007ae:	e01e      	b.n	80007ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	330c      	adds	r3, #12
 80007b6:	623b      	str	r3, [r7, #32]
          break;
 80007b8:	e019      	b.n	80007ee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d102      	bne.n	80007c8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007c2:	2304      	movs	r3, #4
 80007c4:	623b      	str	r3, [r7, #32]
          break;
 80007c6:	e012      	b.n	80007ee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d105      	bne.n	80007dc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007d0:	2308      	movs	r3, #8
 80007d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	69fa      	ldr	r2, [r7, #28]
 80007d8:	611a      	str	r2, [r3, #16]
          break;
 80007da:	e008      	b.n	80007ee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007dc:	2308      	movs	r3, #8
 80007de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	69fa      	ldr	r2, [r7, #28]
 80007e4:	615a      	str	r2, [r3, #20]
          break;
 80007e6:	e002      	b.n	80007ee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
          break;
 80007ec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	2bff      	cmp	r3, #255	; 0xff
 80007f2:	d801      	bhi.n	80007f8 <HAL_GPIO_Init+0xec>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	e001      	b.n	80007fc <HAL_GPIO_Init+0xf0>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3304      	adds	r3, #4
 80007fc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	2bff      	cmp	r3, #255	; 0xff
 8000802:	d802      	bhi.n	800080a <HAL_GPIO_Init+0xfe>
 8000804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	e002      	b.n	8000810 <HAL_GPIO_Init+0x104>
 800080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080c:	3b08      	subs	r3, #8
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	210f      	movs	r1, #15
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	401a      	ands	r2, r3
 8000822:	6a39      	ldr	r1, [r7, #32]
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	431a      	orrs	r2, r3
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000838:	2b00      	cmp	r3, #0
 800083a:	f000 8096 	beq.w	800096a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800083e:	4b59      	ldr	r3, [pc, #356]	; (80009a4 <HAL_GPIO_Init+0x298>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	4a58      	ldr	r2, [pc, #352]	; (80009a4 <HAL_GPIO_Init+0x298>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6193      	str	r3, [r2, #24]
 800084a:	4b56      	ldr	r3, [pc, #344]	; (80009a4 <HAL_GPIO_Init+0x298>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000856:	4a54      	ldr	r2, [pc, #336]	; (80009a8 <HAL_GPIO_Init+0x29c>)
 8000858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	3302      	adds	r3, #2
 800085e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000862:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000866:	f003 0303 	and.w	r3, r3, #3
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	220f      	movs	r2, #15
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43db      	mvns	r3, r3
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	4013      	ands	r3, r2
 8000878:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a4b      	ldr	r2, [pc, #300]	; (80009ac <HAL_GPIO_Init+0x2a0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d013      	beq.n	80008aa <HAL_GPIO_Init+0x19e>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a4a      	ldr	r2, [pc, #296]	; (80009b0 <HAL_GPIO_Init+0x2a4>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d00d      	beq.n	80008a6 <HAL_GPIO_Init+0x19a>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a49      	ldr	r2, [pc, #292]	; (80009b4 <HAL_GPIO_Init+0x2a8>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d007      	beq.n	80008a2 <HAL_GPIO_Init+0x196>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a48      	ldr	r2, [pc, #288]	; (80009b8 <HAL_GPIO_Init+0x2ac>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d101      	bne.n	800089e <HAL_GPIO_Init+0x192>
 800089a:	2303      	movs	r3, #3
 800089c:	e006      	b.n	80008ac <HAL_GPIO_Init+0x1a0>
 800089e:	2304      	movs	r3, #4
 80008a0:	e004      	b.n	80008ac <HAL_GPIO_Init+0x1a0>
 80008a2:	2302      	movs	r3, #2
 80008a4:	e002      	b.n	80008ac <HAL_GPIO_Init+0x1a0>
 80008a6:	2301      	movs	r3, #1
 80008a8:	e000      	b.n	80008ac <HAL_GPIO_Init+0x1a0>
 80008aa:	2300      	movs	r3, #0
 80008ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ae:	f002 0203 	and.w	r2, r2, #3
 80008b2:	0092      	lsls	r2, r2, #2
 80008b4:	4093      	lsls	r3, r2
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008bc:	493a      	ldr	r1, [pc, #232]	; (80009a8 <HAL_GPIO_Init+0x29c>)
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	089b      	lsrs	r3, r3, #2
 80008c2:	3302      	adds	r3, #2
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d006      	beq.n	80008e4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008d6:	4b39      	ldr	r3, [pc, #228]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4938      	ldr	r1, [pc, #224]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	4313      	orrs	r3, r2
 80008e0:	600b      	str	r3, [r1, #0]
 80008e2:	e006      	b.n	80008f2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80008e4:	4b35      	ldr	r3, [pc, #212]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	43db      	mvns	r3, r3
 80008ec:	4933      	ldr	r1, [pc, #204]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 80008ee:	4013      	ands	r3, r2
 80008f0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d006      	beq.n	800090c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80008fe:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	492e      	ldr	r1, [pc, #184]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	4313      	orrs	r3, r2
 8000908:	604b      	str	r3, [r1, #4]
 800090a:	e006      	b.n	800091a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800090c:	4b2b      	ldr	r3, [pc, #172]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	43db      	mvns	r3, r3
 8000914:	4929      	ldr	r1, [pc, #164]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 8000916:	4013      	ands	r3, r2
 8000918:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000922:	2b00      	cmp	r3, #0
 8000924:	d006      	beq.n	8000934 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	4924      	ldr	r1, [pc, #144]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	4313      	orrs	r3, r2
 8000930:	608b      	str	r3, [r1, #8]
 8000932:	e006      	b.n	8000942 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	43db      	mvns	r3, r3
 800093c:	491f      	ldr	r1, [pc, #124]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 800093e:	4013      	ands	r3, r2
 8000940:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d006      	beq.n	800095c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800094e:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 8000950:	68da      	ldr	r2, [r3, #12]
 8000952:	491a      	ldr	r1, [pc, #104]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	4313      	orrs	r3, r2
 8000958:	60cb      	str	r3, [r1, #12]
 800095a:	e006      	b.n	800096a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 800095e:	68da      	ldr	r2, [r3, #12]
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	43db      	mvns	r3, r3
 8000964:	4915      	ldr	r1, [pc, #84]	; (80009bc <HAL_GPIO_Init+0x2b0>)
 8000966:	4013      	ands	r3, r2
 8000968:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096c:	3301      	adds	r3, #1
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	fa22 f303 	lsr.w	r3, r2, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	f47f aed0 	bne.w	8000720 <HAL_GPIO_Init+0x14>
  }
}
 8000980:	bf00      	nop
 8000982:	372c      	adds	r7, #44	; 0x2c
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	10210000 	.word	0x10210000
 8000990:	10110000 	.word	0x10110000
 8000994:	10120000 	.word	0x10120000
 8000998:	10310000 	.word	0x10310000
 800099c:	10320000 	.word	0x10320000
 80009a0:	10220000 	.word	0x10220000
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010000 	.word	0x40010000
 80009ac:	40010800 	.word	0x40010800
 80009b0:	40010c00 	.word	0x40010c00
 80009b4:	40011000 	.word	0x40011000
 80009b8:	40011400 	.word	0x40011400
 80009bc:	40010400 	.word	0x40010400

080009c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	807b      	strh	r3, [r7, #2]
 80009cc:	4613      	mov	r3, r2
 80009ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009d0:	787b      	ldrb	r3, [r7, #1]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d003      	beq.n	80009de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009d6:	887a      	ldrh	r2, [r7, #2]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009dc:	e003      	b.n	80009e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009de:	887b      	ldrh	r3, [r7, #2]
 80009e0:	041a      	lsls	r2, r3, #16
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	611a      	str	r2, [r3, #16]
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	68da      	ldr	r2, [r3, #12]
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	4013      	ands	r3, r2
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d003      	beq.n	8000a10 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a08:	887a      	ldrh	r2, [r7, #2]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000a0e:	e002      	b.n	8000a16 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a10:	887a      	ldrh	r2, [r7, #2]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	611a      	str	r2, [r3, #16]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d101      	bne.n	8000a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e26c      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	f000 8087 	beq.w	8000b4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a40:	4b92      	ldr	r3, [pc, #584]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 030c 	and.w	r3, r3, #12
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d00c      	beq.n	8000a66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a4c:	4b8f      	ldr	r3, [pc, #572]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f003 030c 	and.w	r3, r3, #12
 8000a54:	2b08      	cmp	r3, #8
 8000a56:	d112      	bne.n	8000a7e <HAL_RCC_OscConfig+0x5e>
 8000a58:	4b8c      	ldr	r3, [pc, #560]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a64:	d10b      	bne.n	8000a7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a66:	4b89      	ldr	r3, [pc, #548]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d06c      	beq.n	8000b4c <HAL_RCC_OscConfig+0x12c>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d168      	bne.n	8000b4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e246      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a86:	d106      	bne.n	8000a96 <HAL_RCC_OscConfig+0x76>
 8000a88:	4b80      	ldr	r3, [pc, #512]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a7f      	ldr	r2, [pc, #508]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e02e      	b.n	8000af4 <HAL_RCC_OscConfig+0xd4>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10c      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x98>
 8000a9e:	4b7b      	ldr	r3, [pc, #492]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a7a      	ldr	r2, [pc, #488]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	4b78      	ldr	r3, [pc, #480]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a77      	ldr	r2, [pc, #476]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	e01d      	b.n	8000af4 <HAL_RCC_OscConfig+0xd4>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ac0:	d10c      	bne.n	8000adc <HAL_RCC_OscConfig+0xbc>
 8000ac2:	4b72      	ldr	r3, [pc, #456]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a71      	ldr	r2, [pc, #452]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	4b6f      	ldr	r3, [pc, #444]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a6e      	ldr	r2, [pc, #440]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	e00b      	b.n	8000af4 <HAL_RCC_OscConfig+0xd4>
 8000adc:	4b6b      	ldr	r3, [pc, #428]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a6a      	ldr	r2, [pc, #424]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b68      	ldr	r3, [pc, #416]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a67      	ldr	r2, [pc, #412]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d013      	beq.n	8000b24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000afc:	f7ff fd18 	bl	8000530 <HAL_GetTick>
 8000b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b02:	e008      	b.n	8000b16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b04:	f7ff fd14 	bl	8000530 <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	2b64      	cmp	r3, #100	; 0x64
 8000b10:	d901      	bls.n	8000b16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b12:	2303      	movs	r3, #3
 8000b14:	e1fa      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b16:	4b5d      	ldr	r3, [pc, #372]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d0f0      	beq.n	8000b04 <HAL_RCC_OscConfig+0xe4>
 8000b22:	e014      	b.n	8000b4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b24:	f7ff fd04 	bl	8000530 <HAL_GetTick>
 8000b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b2a:	e008      	b.n	8000b3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b2c:	f7ff fd00 	bl	8000530 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	2b64      	cmp	r3, #100	; 0x64
 8000b38:	d901      	bls.n	8000b3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	e1e6      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b3e:	4b53      	ldr	r3, [pc, #332]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1f0      	bne.n	8000b2c <HAL_RCC_OscConfig+0x10c>
 8000b4a:	e000      	b.n	8000b4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d063      	beq.n	8000c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b5a:	4b4c      	ldr	r3, [pc, #304]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d00b      	beq.n	8000b7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b66:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 030c 	and.w	r3, r3, #12
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d11c      	bne.n	8000bac <HAL_RCC_OscConfig+0x18c>
 8000b72:	4b46      	ldr	r3, [pc, #280]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d116      	bne.n	8000bac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b7e:	4b43      	ldr	r3, [pc, #268]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d005      	beq.n	8000b96 <HAL_RCC_OscConfig+0x176>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	691b      	ldr	r3, [r3, #16]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d001      	beq.n	8000b96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e1ba      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b96:	4b3d      	ldr	r3, [pc, #244]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4939      	ldr	r1, [pc, #228]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000baa:	e03a      	b.n	8000c22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d020      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bb4:	4b36      	ldr	r3, [pc, #216]	; (8000c90 <HAL_RCC_OscConfig+0x270>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bba:	f7ff fcb9 	bl	8000530 <HAL_GetTick>
 8000bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc0:	e008      	b.n	8000bd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bc2:	f7ff fcb5 	bl	8000530 <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d901      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e19b      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f0      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	4927      	ldr	r1, [pc, #156]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	600b      	str	r3, [r1, #0]
 8000bf4:	e015      	b.n	8000c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <HAL_RCC_OscConfig+0x270>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bfc:	f7ff fc98 	bl	8000530 <HAL_GetTick>
 8000c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c02:	e008      	b.n	8000c16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c04:	f7ff fc94 	bl	8000530 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d901      	bls.n	8000c16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c12:	2303      	movs	r3, #3
 8000c14:	e17a      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1f0      	bne.n	8000c04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d03a      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d019      	beq.n	8000c6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_RCC_OscConfig+0x274>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c3c:	f7ff fc78 	bl	8000530 <HAL_GetTick>
 8000c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c44:	f7ff fc74 	bl	8000530 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e15a      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_RCC_OscConfig+0x26c>)
 8000c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0f0      	beq.n	8000c44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f000 faa8 	bl	80011b8 <RCC_Delay>
 8000c68:	e01c      	b.n	8000ca4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_RCC_OscConfig+0x274>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c70:	f7ff fc5e 	bl	8000530 <HAL_GetTick>
 8000c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c76:	e00f      	b.n	8000c98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c78:	f7ff fc5a 	bl	8000530 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d908      	bls.n	8000c98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c86:	2303      	movs	r3, #3
 8000c88:	e140      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	42420000 	.word	0x42420000
 8000c94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c98:	4b9e      	ldr	r3, [pc, #632]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1e9      	bne.n	8000c78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f000 80a6 	beq.w	8000dfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cb6:	4b97      	ldr	r3, [pc, #604]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10d      	bne.n	8000cde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b94      	ldr	r3, [pc, #592]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a93      	ldr	r2, [pc, #588]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b91      	ldr	r3, [pc, #580]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cde:	4b8e      	ldr	r3, [pc, #568]	; (8000f18 <HAL_RCC_OscConfig+0x4f8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d118      	bne.n	8000d1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cea:	4b8b      	ldr	r3, [pc, #556]	; (8000f18 <HAL_RCC_OscConfig+0x4f8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a8a      	ldr	r2, [pc, #552]	; (8000f18 <HAL_RCC_OscConfig+0x4f8>)
 8000cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cf6:	f7ff fc1b 	bl	8000530 <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cfe:	f7ff fc17 	bl	8000530 <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b64      	cmp	r3, #100	; 0x64
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e0fd      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d10:	4b81      	ldr	r3, [pc, #516]	; (8000f18 <HAL_RCC_OscConfig+0x4f8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f0      	beq.n	8000cfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d106      	bne.n	8000d32 <HAL_RCC_OscConfig+0x312>
 8000d24:	4b7b      	ldr	r3, [pc, #492]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d26:	6a1b      	ldr	r3, [r3, #32]
 8000d28:	4a7a      	ldr	r2, [pc, #488]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6213      	str	r3, [r2, #32]
 8000d30:	e02d      	b.n	8000d8e <HAL_RCC_OscConfig+0x36e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10c      	bne.n	8000d54 <HAL_RCC_OscConfig+0x334>
 8000d3a:	4b76      	ldr	r3, [pc, #472]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	4a75      	ldr	r2, [pc, #468]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d40:	f023 0301 	bic.w	r3, r3, #1
 8000d44:	6213      	str	r3, [r2, #32]
 8000d46:	4b73      	ldr	r3, [pc, #460]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	4a72      	ldr	r2, [pc, #456]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d4c:	f023 0304 	bic.w	r3, r3, #4
 8000d50:	6213      	str	r3, [r2, #32]
 8000d52:	e01c      	b.n	8000d8e <HAL_RCC_OscConfig+0x36e>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	2b05      	cmp	r3, #5
 8000d5a:	d10c      	bne.n	8000d76 <HAL_RCC_OscConfig+0x356>
 8000d5c:	4b6d      	ldr	r3, [pc, #436]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	4a6c      	ldr	r2, [pc, #432]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6213      	str	r3, [r2, #32]
 8000d68:	4b6a      	ldr	r3, [pc, #424]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
 8000d6c:	4a69      	ldr	r2, [pc, #420]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6213      	str	r3, [r2, #32]
 8000d74:	e00b      	b.n	8000d8e <HAL_RCC_OscConfig+0x36e>
 8000d76:	4b67      	ldr	r3, [pc, #412]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d78:	6a1b      	ldr	r3, [r3, #32]
 8000d7a:	4a66      	ldr	r2, [pc, #408]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d7c:	f023 0301 	bic.w	r3, r3, #1
 8000d80:	6213      	str	r3, [r2, #32]
 8000d82:	4b64      	ldr	r3, [pc, #400]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	4a63      	ldr	r2, [pc, #396]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000d88:	f023 0304 	bic.w	r3, r3, #4
 8000d8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d015      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d96:	f7ff fbcb 	bl	8000530 <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d9c:	e00a      	b.n	8000db4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d9e:	f7ff fbc7 	bl	8000530 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e0ab      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000db4:	4b57      	ldr	r3, [pc, #348]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0ee      	beq.n	8000d9e <HAL_RCC_OscConfig+0x37e>
 8000dc0:	e014      	b.n	8000dec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fbb5 	bl	8000530 <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dc8:	e00a      	b.n	8000de0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dca:	f7ff fbb1 	bl	8000530 <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d901      	bls.n	8000de0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e095      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000de0:	4b4c      	ldr	r3, [pc, #304]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1ee      	bne.n	8000dca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d105      	bne.n	8000dfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000df2:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a47      	ldr	r2, [pc, #284]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8081 	beq.w	8000f0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e08:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d061      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d146      	bne.n	8000eaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e1c:	4b3f      	ldr	r3, [pc, #252]	; (8000f1c <HAL_RCC_OscConfig+0x4fc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e22:	f7ff fb85 	bl	8000530 <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e28:	e008      	b.n	8000e3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e2a:	f7ff fb81 	bl	8000530 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d901      	bls.n	8000e3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e067      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e3c:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1f0      	bne.n	8000e2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e50:	d108      	bne.n	8000e64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e52:	4b30      	ldr	r3, [pc, #192]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	492d      	ldr	r1, [pc, #180]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e64:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a19      	ldr	r1, [r3, #32]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	430b      	orrs	r3, r1
 8000e76:	4927      	ldr	r1, [pc, #156]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e7c:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <HAL_RCC_OscConfig+0x4fc>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fb55 	bl	8000530 <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e8a:	f7ff fb51 	bl	8000530 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e037      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_OscConfig+0x46a>
 8000ea8:	e02f      	b.n	8000f0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_RCC_OscConfig+0x4fc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fb3e 	bl	8000530 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eb8:	f7ff fb3a 	bl	8000530 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e020      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eca:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x498>
 8000ed6:	e018      	b.n	8000f0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69db      	ldr	r3, [r3, #28]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d101      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e013      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_RCC_OscConfig+0x4f4>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d106      	bne.n	8000f06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d001      	beq.n	8000f0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40007000 	.word	0x40007000
 8000f1c:	42420060 	.word	0x42420060

08000f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e0d0      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f34:	4b6a      	ldr	r3, [pc, #424]	; (80010e0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d910      	bls.n	8000f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f42:	4b67      	ldr	r3, [pc, #412]	; (80010e0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f023 0207 	bic.w	r2, r3, #7
 8000f4a:	4965      	ldr	r1, [pc, #404]	; (80010e0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f52:	4b63      	ldr	r3, [pc, #396]	; (80010e0 <HAL_RCC_ClockConfig+0x1c0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d001      	beq.n	8000f64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e0b8      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d020      	beq.n	8000fb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d005      	beq.n	8000f88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f7c:	4b59      	ldr	r3, [pc, #356]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	4a58      	ldr	r2, [pc, #352]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0308 	and.w	r3, r3, #8
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f94:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	4a52      	ldr	r2, [pc, #328]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 8000f9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa0:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	494d      	ldr	r1, [pc, #308]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d040      	beq.n	8001040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d107      	bne.n	8000fd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	4b47      	ldr	r3, [pc, #284]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d115      	bne.n	8000ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e07f      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d107      	bne.n	8000fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fde:	4b41      	ldr	r3, [pc, #260]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d109      	bne.n	8000ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e073      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fee:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e06b      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ffe:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f023 0203 	bic.w	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	4936      	ldr	r1, [pc, #216]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001010:	f7ff fa8e 	bl	8000530 <HAL_GetTick>
 8001014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001016:	e00a      	b.n	800102e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001018:	f7ff fa8a 	bl	8000530 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	f241 3288 	movw	r2, #5000	; 0x1388
 8001026:	4293      	cmp	r3, r2
 8001028:	d901      	bls.n	800102e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e053      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800102e:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 020c 	and.w	r2, r3, #12
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	429a      	cmp	r2, r3
 800103e:	d1eb      	bne.n	8001018 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	429a      	cmp	r2, r3
 800104c:	d210      	bcs.n	8001070 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104e:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 0207 	bic.w	r2, r3, #7
 8001056:	4922      	ldr	r1, [pc, #136]	; (80010e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4313      	orrs	r3, r2
 800105c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_RCC_ClockConfig+0x1c0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d001      	beq.n	8001070 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e032      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4916      	ldr	r1, [pc, #88]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 800108a:	4313      	orrs	r3, r2
 800108c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d009      	beq.n	80010ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	490e      	ldr	r1, [pc, #56]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010ae:	f000 f821 	bl	80010f4 <HAL_RCC_GetSysClockFreq>
 80010b2:	4601      	mov	r1, r0
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_RCC_ClockConfig+0x1c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_RCC_ClockConfig+0x1c8>)
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	fa21 f303 	lsr.w	r3, r1, r3
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <HAL_RCC_ClockConfig+0x1cc>)
 80010c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_RCC_ClockConfig+0x1d0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f9ec 	bl	80004ac <HAL_InitTick>

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40022000 	.word	0x40022000
 80010e4:	40021000 	.word	0x40021000
 80010e8:	08002664 	.word	0x08002664
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010f4:	b490      	push	{r4, r7}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80010fc:	1d3c      	adds	r4, r7, #4
 80010fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b04      	cmp	r3, #4
 800112c:	d002      	beq.n	8001134 <HAL_RCC_GetSysClockFreq+0x40>
 800112e:	2b08      	cmp	r3, #8
 8001130:	d003      	beq.n	800113a <HAL_RCC_GetSysClockFreq+0x46>
 8001132:	e02d      	b.n	8001190 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001136:	623b      	str	r3, [r7, #32]
      break;
 8001138:	e02d      	b.n	8001196 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	0c9b      	lsrs	r3, r3, #18
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001146:	4413      	add	r3, r2
 8001148:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800114c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d013      	beq.n	8001180 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	0c5b      	lsrs	r3, r3, #17
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001166:	4413      	add	r3, r2
 8001168:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800116c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001172:	fb02 f203 	mul.w	r2, r2, r3
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	fbb2 f3f3 	udiv	r3, r2, r3
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
 800117e:	e004      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	623b      	str	r3, [r7, #32]
      break;
 800118e:	e002      	b.n	8001196 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001192:	623b      	str	r3, [r7, #32]
      break;
 8001194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001196:	6a3b      	ldr	r3, [r7, #32]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bc90      	pop	{r4, r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	08002648 	.word	0x08002648
 80011a8:	08002658 	.word	0x08002658
 80011ac:	40021000 	.word	0x40021000
 80011b0:	007a1200 	.word	0x007a1200
 80011b4:	003d0900 	.word	0x003d0900

080011b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <RCC_Delay+0x34>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <RCC_Delay+0x38>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0a5b      	lsrs	r3, r3, #9
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80011d4:	bf00      	nop
  }
  while (Delay --);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1e5a      	subs	r2, r3, #1
 80011da:	60fa      	str	r2, [r7, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f9      	bne.n	80011d4 <RCC_Delay+0x1c>
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000000 	.word	0x20000000
 80011f0:	10624dd3 	.word	0x10624dd3

080011f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001206:	2b84      	cmp	r3, #132	; 0x84
 8001208:	d005      	beq.n	8001216 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800120a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4413      	add	r3, r2
 8001212:	3303      	adds	r3, #3
 8001214:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr

08001222 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001226:	f000 facd 	bl	80017c4 <vTaskStartScheduler>
  
  return osOK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	bd80      	pop	{r7, pc}

08001230 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af04      	add	r7, sp, #16
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d020      	beq.n	8001284 <osThreadCreate+0x54>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d01c      	beq.n	8001284 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685c      	ldr	r4, [r3, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681d      	ldr	r5, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691e      	ldr	r6, [r3, #16]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ffc9 	bl	80011f4 <makeFreeRtosPriority>
 8001262:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800126c:	9202      	str	r2, [sp, #8]
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	9100      	str	r1, [sp, #0]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	4632      	mov	r2, r6
 8001276:	4629      	mov	r1, r5
 8001278:	4620      	mov	r0, r4
 800127a:	f000 f8e8 	bl	800144e <xTaskCreateStatic>
 800127e:	4603      	mov	r3, r0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	e01c      	b.n	80012be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685c      	ldr	r4, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001290:	b29e      	uxth	r6, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ffab 	bl	80011f4 <makeFreeRtosPriority>
 800129e:	4602      	mov	r2, r0
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	9200      	str	r2, [sp, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	4632      	mov	r2, r6
 80012ac:	4629      	mov	r1, r5
 80012ae:	4620      	mov	r0, r4
 80012b0:	f000 f926 	bl	8001500 <xTaskCreate>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d001      	beq.n	80012be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e000      	b.n	80012c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <osDelay+0x16>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	e000      	b.n	80012e0 <osDelay+0x18>
 80012de:	2301      	movs	r3, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fa3b 	bl	800175c <vTaskDelay>
  
  return osOK;
 80012e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f103 0208 	add.w	r2, r3, #8
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f103 0208 	add.w	r2, r3, #8
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f103 0208 	add.w	r2, r3, #8
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001346:	b480      	push	{r7}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	601a      	str	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a2:	d103      	bne.n	80013ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	e00c      	b.n	80013c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3308      	adds	r3, #8
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e002      	b.n	80013ba <vListInsert+0x2e>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d2f6      	bcs.n	80013b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6892      	ldr	r2, [r2, #8]
 8001412:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6852      	ldr	r2, [r2, #4]
 800141c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	d103      	bne.n	8001430 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	1e5a      	subs	r2, r3, #1
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800144e:	b580      	push	{r7, lr}
 8001450:	b08e      	sub	sp, #56	; 0x38
 8001452:	af04      	add	r7, sp, #16
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800145c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145e:	2b00      	cmp	r3, #0
 8001460:	d109      	bne.n	8001476 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001466:	f383 8811 	msr	BASEPRI, r3
 800146a:	f3bf 8f6f 	isb	sy
 800146e:	f3bf 8f4f 	dsb	sy
 8001472:	623b      	str	r3, [r7, #32]
 8001474:	e7fe      	b.n	8001474 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001478:	2b00      	cmp	r3, #0
 800147a:	d109      	bne.n	8001490 <xTaskCreateStatic+0x42>
 800147c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001480:	f383 8811 	msr	BASEPRI, r3
 8001484:	f3bf 8f6f 	isb	sy
 8001488:	f3bf 8f4f 	dsb	sy
 800148c:	61fb      	str	r3, [r7, #28]
 800148e:	e7fe      	b.n	800148e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001490:	2354      	movs	r3, #84	; 0x54
 8001492:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	2b54      	cmp	r3, #84	; 0x54
 8001498:	d009      	beq.n	80014ae <xTaskCreateStatic+0x60>
 800149a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800149e:	f383 8811 	msr	BASEPRI, r3
 80014a2:	f3bf 8f6f 	isb	sy
 80014a6:	f3bf 8f4f 	dsb	sy
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	e7fe      	b.n	80014ac <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80014ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01e      	beq.n	80014f2 <xTaskCreateStatic+0xa4>
 80014b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d01b      	beq.n	80014f2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80014ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	2202      	movs	r2, #2
 80014c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80014cc:	2300      	movs	r3, #0
 80014ce:	9303      	str	r3, [sp, #12]
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	68b9      	ldr	r1, [r7, #8]
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f000 f850 	bl	800158a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80014ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014ec:	f000 f8cc 	bl	8001688 <prvAddNewTaskToReadyList>
 80014f0:	e001      	b.n	80014f6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80014f6:	697b      	ldr	r3, [r7, #20]
	}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af04      	add	r7, sp, #16
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	4613      	mov	r3, r2
 800150e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fe71 	bl	80021fc <pvPortMalloc>
 800151a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00e      	beq.n	8001540 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001522:	2054      	movs	r0, #84	; 0x54
 8001524:	f000 fe6a 	bl	80021fc <pvPortMalloc>
 8001528:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	631a      	str	r2, [r3, #48]	; 0x30
 8001536:	e005      	b.n	8001544 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001538:	6978      	ldr	r0, [r7, #20]
 800153a:	f000 ff21 	bl	8002380 <vPortFree>
 800153e:	e001      	b.n	8001544 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d017      	beq.n	800157a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001552:	88fa      	ldrh	r2, [r7, #6]
 8001554:	2300      	movs	r3, #0
 8001556:	9303      	str	r3, [sp, #12]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	9302      	str	r3, [sp, #8]
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68b9      	ldr	r1, [r7, #8]
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f80e 	bl	800158a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800156e:	69f8      	ldr	r0, [r7, #28]
 8001570:	f000 f88a 	bl	8001688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001574:	2301      	movs	r3, #1
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	e002      	b.n	8001580 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001580:	69bb      	ldr	r3, [r7, #24]
	}
 8001582:	4618      	mov	r0, r3
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b088      	sub	sp, #32
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015a2:	3b01      	subs	r3, #1
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	f023 0307 	bic.w	r3, r3, #7
 80015b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d009      	beq.n	80015d0 <prvInitialiseNewTask+0x46>
 80015bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c0:	f383 8811 	msr	BASEPRI, r3
 80015c4:	f3bf 8f6f 	isb	sy
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e7fe      	b.n	80015ce <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	e012      	b.n	80015fc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	4413      	add	r3, r2
 80015dc:	7819      	ldrb	r1, [r3, #0]
 80015de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	3334      	adds	r3, #52	; 0x34
 80015e6:	460a      	mov	r2, r1
 80015e8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3301      	adds	r3, #1
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	2b0f      	cmp	r3, #15
 8001600:	d9e9      	bls.n	80015d6 <prvInitialiseNewTask+0x4c>
 8001602:	e000      	b.n	8001606 <prvInitialiseNewTask+0x7c>
		{
			break;
 8001604:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001610:	2b06      	cmp	r3, #6
 8001612:	d901      	bls.n	8001618 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001614:	2306      	movs	r3, #6
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800161e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001622:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001626:	2200      	movs	r2, #0
 8001628:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162c:	3304      	adds	r3, #4
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fe7d 	bl	800132e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001636:	3318      	adds	r3, #24
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fe78 	bl	800132e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800163e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001642:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	f1c3 0207 	rsb	r2, r3, #7
 800164a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800164e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001656:	2200      	movs	r2, #0
 8001658:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	68f9      	ldr	r1, [r7, #12]
 8001666:	69b8      	ldr	r0, [r7, #24]
 8001668:	f000 fc24 	bl	8001eb4 <pxPortInitialiseStack>
 800166c:	4602      	mov	r2, r0
 800166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001670:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001674:	2b00      	cmp	r3, #0
 8001676:	d002      	beq.n	800167e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800167c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800167e:	bf00      	nop
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001690:	f000 fcfa 	bl	8002088 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <prvAddNewTaskToReadyList+0xb8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a29      	ldr	r2, [pc, #164]	; (8001740 <prvAddNewTaskToReadyList+0xb8>)
 800169c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800169e:	4b29      	ldr	r3, [pc, #164]	; (8001744 <prvAddNewTaskToReadyList+0xbc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80016a6:	4a27      	ldr	r2, [pc, #156]	; (8001744 <prvAddNewTaskToReadyList+0xbc>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <prvAddNewTaskToReadyList+0xb8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d110      	bne.n	80016d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80016b4:	f000 fabc 	bl	8001c30 <prvInitialiseTaskLists>
 80016b8:	e00d      	b.n	80016d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <prvAddNewTaskToReadyList+0xc0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d109      	bne.n	80016d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <prvAddNewTaskToReadyList+0xbc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d802      	bhi.n	80016d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80016d0:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <prvAddNewTaskToReadyList+0xbc>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <prvAddNewTaskToReadyList+0xc4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	3301      	adds	r3, #1
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <prvAddNewTaskToReadyList+0xc4>)
 80016de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	2201      	movs	r2, #1
 80016e6:	409a      	lsls	r2, r3
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <prvAddNewTaskToReadyList+0xc8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	4a18      	ldr	r2, [pc, #96]	; (8001750 <prvAddNewTaskToReadyList+0xc8>)
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <prvAddNewTaskToReadyList+0xcc>)
 8001700:	441a      	add	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3304      	adds	r3, #4
 8001706:	4619      	mov	r1, r3
 8001708:	4610      	mov	r0, r2
 800170a:	f7ff fe1c 	bl	8001346 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800170e:	f000 fce9 	bl	80020e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <prvAddNewTaskToReadyList+0xc0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00e      	beq.n	8001738 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <prvAddNewTaskToReadyList+0xbc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	429a      	cmp	r2, r3
 8001726:	d207      	bcs.n	8001738 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <prvAddNewTaskToReadyList+0xd0>)
 800172a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	f3bf 8f4f 	dsb	sy
 8001734:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000380 	.word	0x20000380
 8001744:	20000280 	.word	0x20000280
 8001748:	2000038c 	.word	0x2000038c
 800174c:	2000039c 	.word	0x2000039c
 8001750:	20000388 	.word	0x20000388
 8001754:	20000284 	.word	0x20000284
 8001758:	e000ed04 	.word	0xe000ed04

0800175c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d016      	beq.n	800179c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <vTaskDelay+0x60>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <vTaskDelay+0x2e>
 8001776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800177a:	f383 8811 	msr	BASEPRI, r3
 800177e:	f3bf 8f6f 	isb	sy
 8001782:	f3bf 8f4f 	dsb	sy
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	e7fe      	b.n	8001788 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800178a:	f000 f879 	bl	8001880 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800178e:	2100      	movs	r1, #0
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fb29 	bl	8001de8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001796:	f000 f881 	bl	800189c <xTaskResumeAll>
 800179a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d107      	bne.n	80017b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <vTaskDelay+0x64>)
 80017a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200003a8 	.word	0x200003a8
 80017c0:	e000ed04 	.word	0xe000ed04

080017c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80017d2:	463a      	mov	r2, r7
 80017d4:	1d39      	adds	r1, r7, #4
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fcb8 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	9202      	str	r2, [sp, #8]
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	2300      	movs	r3, #0
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	460a      	mov	r2, r1
 80017f2:	491d      	ldr	r1, [pc, #116]	; (8001868 <vTaskStartScheduler+0xa4>)
 80017f4:	481d      	ldr	r0, [pc, #116]	; (800186c <vTaskStartScheduler+0xa8>)
 80017f6:	f7ff fe2a 	bl	800144e <xTaskCreateStatic>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <vTaskStartScheduler+0xac>)
 80017fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <vTaskStartScheduler+0xac>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001808:	2301      	movs	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e001      	b.n	8001812 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d115      	bne.n	8001844 <vTaskStartScheduler+0x80>
 8001818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181c:	f383 8811 	msr	BASEPRI, r3
 8001820:	f3bf 8f6f 	isb	sy
 8001824:	f3bf 8f4f 	dsb	sy
 8001828:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <vTaskStartScheduler+0xb0>)
 800182c:	f04f 32ff 	mov.w	r2, #4294967295
 8001830:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <vTaskStartScheduler+0xb4>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <vTaskStartScheduler+0xb8>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800183e:	f000 fbb3 	bl	8001fa8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001842:	e00d      	b.n	8001860 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184a:	d109      	bne.n	8001860 <vTaskStartScheduler+0x9c>
 800184c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001850:	f383 8811 	msr	BASEPRI, r3
 8001854:	f3bf 8f6f 	isb	sy
 8001858:	f3bf 8f4f 	dsb	sy
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	e7fe      	b.n	800185e <vTaskStartScheduler+0x9a>
}
 8001860:	bf00      	nop
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	0800265c 	.word	0x0800265c
 800186c:	08001c01 	.word	0x08001c01
 8001870:	200003a4 	.word	0x200003a4
 8001874:	200003a0 	.word	0x200003a0
 8001878:	2000038c 	.word	0x2000038c
 800187c:	20000384 	.word	0x20000384

08001880 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <vTaskSuspendAll+0x18>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3301      	adds	r3, #1
 800188a:	4a03      	ldr	r2, [pc, #12]	; (8001898 <vTaskSuspendAll+0x18>)
 800188c:	6013      	str	r3, [r2, #0]
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	200003a8 	.word	0x200003a8

0800189c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80018aa:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <xTaskResumeAll+0x114>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <xTaskResumeAll+0x2a>
 80018b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b6:	f383 8811 	msr	BASEPRI, r3
 80018ba:	f3bf 8f6f 	isb	sy
 80018be:	f3bf 8f4f 	dsb	sy
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	e7fe      	b.n	80018c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80018c6:	f000 fbdf 	bl	8002088 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80018ca:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <xTaskResumeAll+0x114>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	4a37      	ldr	r2, [pc, #220]	; (80019b0 <xTaskResumeAll+0x114>)
 80018d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018d4:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <xTaskResumeAll+0x114>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d161      	bne.n	80019a0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <xTaskResumeAll+0x118>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d05d      	beq.n	80019a0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018e4:	e02e      	b.n	8001944 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80018e6:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <xTaskResumeAll+0x11c>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3318      	adds	r3, #24
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fd82 	bl	80013fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3304      	adds	r3, #4
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fd7d 	bl	80013fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	2201      	movs	r2, #1
 8001908:	409a      	lsls	r2, r3
 800190a:	4b2c      	ldr	r3, [pc, #176]	; (80019bc <xTaskResumeAll+0x120>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	4a2a      	ldr	r2, [pc, #168]	; (80019bc <xTaskResumeAll+0x120>)
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4a27      	ldr	r2, [pc, #156]	; (80019c0 <xTaskResumeAll+0x124>)
 8001922:	441a      	add	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3304      	adds	r3, #4
 8001928:	4619      	mov	r1, r3
 800192a:	4610      	mov	r0, r2
 800192c:	f7ff fd0b 	bl	8001346 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <xTaskResumeAll+0x128>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	429a      	cmp	r2, r3
 800193c:	d302      	bcc.n	8001944 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <xTaskResumeAll+0x12c>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001944:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <xTaskResumeAll+0x11c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1cc      	bne.n	80018e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001952:	f000 fa07 	bl	8001d64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <xTaskResumeAll+0x130>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d010      	beq.n	8001984 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001962:	f000 f837 	bl	80019d4 <xTaskIncrementTick>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <xTaskResumeAll+0x12c>)
 800196e:	2201      	movs	r2, #1
 8001970:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3b01      	subs	r3, #1
 8001976:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f1      	bne.n	8001962 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <xTaskResumeAll+0x130>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <xTaskResumeAll+0x12c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d009      	beq.n	80019a0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800198c:	2301      	movs	r3, #1
 800198e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <xTaskResumeAll+0x134>)
 8001992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	f3bf 8f4f 	dsb	sy
 800199c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80019a0:	f000 fba0 	bl	80020e4 <vPortExitCritical>

	return xAlreadyYielded;
 80019a4:	68bb      	ldr	r3, [r7, #8]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200003a8 	.word	0x200003a8
 80019b4:	20000380 	.word	0x20000380
 80019b8:	20000340 	.word	0x20000340
 80019bc:	20000388 	.word	0x20000388
 80019c0:	20000284 	.word	0x20000284
 80019c4:	20000280 	.word	0x20000280
 80019c8:	20000394 	.word	0x20000394
 80019cc:	20000390 	.word	0x20000390
 80019d0:	e000ed04 	.word	0xe000ed04

080019d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019de:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <xTaskIncrementTick+0x14c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f040 808c 	bne.w	8001b00 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80019e8:	4b4e      	ldr	r3, [pc, #312]	; (8001b24 <xTaskIncrementTick+0x150>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80019f0:	4a4c      	ldr	r2, [pc, #304]	; (8001b24 <xTaskIncrementTick+0x150>)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d11f      	bne.n	8001a3c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80019fc:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <xTaskIncrementTick+0x154>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <xTaskIncrementTick+0x46>
 8001a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0a:	f383 8811 	msr	BASEPRI, r3
 8001a0e:	f3bf 8f6f 	isb	sy
 8001a12:	f3bf 8f4f 	dsb	sy
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	e7fe      	b.n	8001a18 <xTaskIncrementTick+0x44>
 8001a1a:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <xTaskIncrementTick+0x154>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <xTaskIncrementTick+0x158>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a40      	ldr	r2, [pc, #256]	; (8001b28 <xTaskIncrementTick+0x154>)
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4a40      	ldr	r2, [pc, #256]	; (8001b2c <xTaskIncrementTick+0x158>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <xTaskIncrementTick+0x15c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	4a3e      	ldr	r2, [pc, #248]	; (8001b30 <xTaskIncrementTick+0x15c>)
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	f000 f994 	bl	8001d64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <xTaskIncrementTick+0x160>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d34d      	bcc.n	8001ae2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a46:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <xTaskIncrementTick+0x154>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <xTaskIncrementTick+0x80>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <xTaskIncrementTick+0x82>
 8001a54:	2300      	movs	r3, #0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d004      	beq.n	8001a64 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a5a:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <xTaskIncrementTick+0x160>)
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	601a      	str	r2, [r3, #0]
					break;
 8001a62:	e03e      	b.n	8001ae2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a64:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <xTaskIncrementTick+0x154>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d203      	bcs.n	8001a84 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001a7c:	4a2d      	ldr	r2, [pc, #180]	; (8001b34 <xTaskIncrementTick+0x160>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
						break;
 8001a82:	e02e      	b.n	8001ae2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	3304      	adds	r3, #4
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fcb7 	bl	80013fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3318      	adds	r3, #24
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fcae 	bl	80013fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <xTaskIncrementTick+0x164>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	4a22      	ldr	r2, [pc, #136]	; (8001b38 <xTaskIncrementTick+0x164>)
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4a1f      	ldr	r2, [pc, #124]	; (8001b3c <xTaskIncrementTick+0x168>)
 8001ac0:	441a      	add	r2, r3
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4610      	mov	r0, r2
 8001aca:	f7ff fc3c 	bl	8001346 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <xTaskIncrementTick+0x16c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d3b4      	bcc.n	8001a46 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001adc:	2301      	movs	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ae0:	e7b1      	b.n	8001a46 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <xTaskIncrementTick+0x16c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae8:	4914      	ldr	r1, [pc, #80]	; (8001b3c <xTaskIncrementTick+0x168>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d907      	bls.n	8001b0a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e004      	b.n	8001b0a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <xTaskIncrementTick+0x170>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <xTaskIncrementTick+0x170>)
 8001b08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <xTaskIncrementTick+0x174>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001b12:	2301      	movs	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001b16:	697b      	ldr	r3, [r7, #20]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200003a8 	.word	0x200003a8
 8001b24:	20000384 	.word	0x20000384
 8001b28:	20000338 	.word	0x20000338
 8001b2c:	2000033c 	.word	0x2000033c
 8001b30:	20000398 	.word	0x20000398
 8001b34:	200003a0 	.word	0x200003a0
 8001b38:	20000388 	.word	0x20000388
 8001b3c:	20000284 	.word	0x20000284
 8001b40:	20000280 	.word	0x20000280
 8001b44:	20000390 	.word	0x20000390
 8001b48:	20000394 	.word	0x20000394

08001b4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <vTaskSwitchContext+0xa0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001b5a:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <vTaskSwitchContext+0xa4>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001b60:	e03e      	b.n	8001be0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8001b62:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <vTaskSwitchContext+0xa4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001b68:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <vTaskSwitchContext+0xa8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001b76:	7afb      	ldrb	r3, [r7, #11]
 8001b78:	f1c3 031f 	rsb	r3, r3, #31
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	491e      	ldr	r1, [pc, #120]	; (8001bf8 <vTaskSwitchContext+0xac>)
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8001b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b96:	f383 8811 	msr	BASEPRI, r3
 8001b9a:	f3bf 8f6f 	isb	sy
 8001b9e:	f3bf 8f4f 	dsb	sy
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	e7fe      	b.n	8001ba4 <vTaskSwitchContext+0x58>
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <vTaskSwitchContext+0xac>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	3308      	adds	r3, #8
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d104      	bne.n	8001bd6 <vTaskSwitchContext+0x8a>
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <vTaskSwitchContext+0xb0>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	200003a8 	.word	0x200003a8
 8001bf0:	20000394 	.word	0x20000394
 8001bf4:	20000388 	.word	0x20000388
 8001bf8:	20000284 	.word	0x20000284
 8001bfc:	20000280 	.word	0x20000280

08001c00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001c08:	f000 f852 	bl	8001cb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <prvIdleTask+0x28>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d9f9      	bls.n	8001c08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <prvIdleTask+0x2c>)
 8001c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f3bf 8f4f 	dsb	sy
 8001c20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001c24:	e7f0      	b.n	8001c08 <prvIdleTask+0x8>
 8001c26:	bf00      	nop
 8001c28:	20000284 	.word	0x20000284
 8001c2c:	e000ed04 	.word	0xe000ed04

08001c30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	e00c      	b.n	8001c56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <prvInitialiseTaskLists+0x60>)
 8001c48:	4413      	add	r3, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fb50 	bl	80012f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3301      	adds	r3, #1
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b06      	cmp	r3, #6
 8001c5a:	d9ef      	bls.n	8001c3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <prvInitialiseTaskLists+0x64>)
 8001c5e:	f7ff fb47 	bl	80012f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001c62:	480d      	ldr	r0, [pc, #52]	; (8001c98 <prvInitialiseTaskLists+0x68>)
 8001c64:	f7ff fb44 	bl	80012f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <prvInitialiseTaskLists+0x6c>)
 8001c6a:	f7ff fb41 	bl	80012f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001c6e:	480c      	ldr	r0, [pc, #48]	; (8001ca0 <prvInitialiseTaskLists+0x70>)
 8001c70:	f7ff fb3e 	bl	80012f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001c74:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <prvInitialiseTaskLists+0x74>)
 8001c76:	f7ff fb3b 	bl	80012f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <prvInitialiseTaskLists+0x78>)
 8001c7c:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <prvInitialiseTaskLists+0x64>)
 8001c7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <prvInitialiseTaskLists+0x7c>)
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <prvInitialiseTaskLists+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000284 	.word	0x20000284
 8001c94:	20000310 	.word	0x20000310
 8001c98:	20000324 	.word	0x20000324
 8001c9c:	20000340 	.word	0x20000340
 8001ca0:	20000354 	.word	0x20000354
 8001ca4:	2000036c 	.word	0x2000036c
 8001ca8:	20000338 	.word	0x20000338
 8001cac:	2000033c 	.word	0x2000033c

08001cb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cb6:	e019      	b.n	8001cec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001cb8:	f000 f9e6 	bl	8002088 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <prvCheckTasksWaitingTermination+0x4c>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fb97 	bl	80013fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <prvCheckTasksWaitingTermination+0x50>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <prvCheckTasksWaitingTermination+0x50>)
 8001cd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <prvCheckTasksWaitingTermination+0x54>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <prvCheckTasksWaitingTermination+0x54>)
 8001ce0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001ce2:	f000 f9ff 	bl	80020e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f80e 	bl	8001d08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <prvCheckTasksWaitingTermination+0x54>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1e1      	bne.n	8001cb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000354 	.word	0x20000354
 8001d00:	20000380 	.word	0x20000380
 8001d04:	20000368 	.word	0x20000368

08001d08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d108      	bne.n	8001d2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fb2e 	bl	8002380 <vPortFree>
				vPortFree( pxTCB );
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 fb2b 	bl	8002380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001d2a:	e017      	b.n	8001d5c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d103      	bne.n	8001d3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fb22 	bl	8002380 <vPortFree>
	}
 8001d3c:	e00e      	b.n	8001d5c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d009      	beq.n	8001d5c <prvDeleteTCB+0x54>
 8001d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4c:	f383 8811 	msr	BASEPRI, r3
 8001d50:	f3bf 8f6f 	isb	sy
 8001d54:	f3bf 8f4f 	dsb	sy
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	e7fe      	b.n	8001d5a <prvDeleteTCB+0x52>
	}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <prvResetNextTaskUnblockTime+0x40>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <prvResetNextTaskUnblockTime+0x14>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <prvResetNextTaskUnblockTime+0x16>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d004      	beq.n	8001d88 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <prvResetNextTaskUnblockTime+0x44>)
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001d86:	e008      	b.n	8001d9a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <prvResetNextTaskUnblockTime+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <prvResetNextTaskUnblockTime+0x44>)
 8001d98:	6013      	str	r3, [r2, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	20000338 	.word	0x20000338
 8001da8:	200003a0 	.word	0x200003a0

08001dac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <xTaskGetSchedulerState+0x34>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	e008      	b.n	8001dd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <xTaskGetSchedulerState+0x38>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	e001      	b.n	8001dd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001dd2:	687b      	ldr	r3, [r7, #4]
	}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	2000038c 	.word	0x2000038c
 8001de4:	200003a8 	.word	0x200003a8

08001de8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001df2:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001df8:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fafc 	bl	80013fc <uxListRemove>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10b      	bne.n	8001e22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	2201      	movs	r2, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	4a20      	ldr	r2, [pc, #128]	; (8001ea0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001e20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e28:	d10a      	bne.n	8001e40 <prvAddCurrentTaskToDelayedList+0x58>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e30:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3304      	adds	r3, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	481a      	ldr	r0, [pc, #104]	; (8001ea4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001e3a:	f7ff fa84 	bl	8001346 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001e3e:	e026      	b.n	8001e8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d209      	bcs.n	8001e6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3304      	adds	r3, #4
 8001e62:	4619      	mov	r1, r3
 8001e64:	4610      	mov	r0, r2
 8001e66:	f7ff fa91 	bl	800138c <vListInsert>
}
 8001e6a:	e010      	b.n	8001e8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <prvAddCurrentTaskToDelayedList+0xc4>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3304      	adds	r3, #4
 8001e76:	4619      	mov	r1, r3
 8001e78:	4610      	mov	r0, r2
 8001e7a:	f7ff fa87 	bl	800138c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d202      	bcs.n	8001e8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001e88:	4a09      	ldr	r2, [pc, #36]	; (8001eb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	6013      	str	r3, [r2, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000384 	.word	0x20000384
 8001e9c:	20000280 	.word	0x20000280
 8001ea0:	20000388 	.word	0x20000388
 8001ea4:	2000036c 	.word	0x2000036c
 8001ea8:	2000033c 	.word	0x2000033c
 8001eac:	20000338 	.word	0x20000338
 8001eb0:	200003a0 	.word	0x200003a0

08001eb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3b04      	subs	r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f023 0201 	bic.w	r2, r3, #1
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	3b04      	subs	r3, #4
 8001ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001ee4:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <pxPortInitialiseStack+0x54>)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3b14      	subs	r3, #20
 8001eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3b20      	subs	r3, #32
 8001efa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001efc:	68fb      	ldr	r3, [r7, #12]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	08001f0d 	.word	0x08001f0d

08001f0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <prvTaskExitError+0x4c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1e:	d009      	beq.n	8001f34 <prvTaskExitError+0x28>
 8001f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f24:	f383 8811 	msr	BASEPRI, r3
 8001f28:	f3bf 8f6f 	isb	sy
 8001f2c:	f3bf 8f4f 	dsb	sy
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	e7fe      	b.n	8001f32 <prvTaskExitError+0x26>
 8001f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f38:	f383 8811 	msr	BASEPRI, r3
 8001f3c:	f3bf 8f6f 	isb	sy
 8001f40:	f3bf 8f4f 	dsb	sy
 8001f44:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001f46:	bf00      	nop
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0fc      	beq.n	8001f48 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	2000000c 	.word	0x2000000c
 8001f5c:	00000000 	.word	0x00000000

08001f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <pxCurrentTCBConst2>)
 8001f62:	6819      	ldr	r1, [r3, #0]
 8001f64:	6808      	ldr	r0, [r1, #0]
 8001f66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f6a:	f380 8809 	msr	PSP, r0
 8001f6e:	f3bf 8f6f 	isb	sy
 8001f72:	f04f 0000 	mov.w	r0, #0
 8001f76:	f380 8811 	msr	BASEPRI, r0
 8001f7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001f7e:	4770      	bx	lr

08001f80 <pxCurrentTCBConst2>:
 8001f80:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop

08001f88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001f88:	4806      	ldr	r0, [pc, #24]	; (8001fa4 <prvPortStartFirstTask+0x1c>)
 8001f8a:	6800      	ldr	r0, [r0, #0]
 8001f8c:	6800      	ldr	r0, [r0, #0]
 8001f8e:	f380 8808 	msr	MSP, r0
 8001f92:	b662      	cpsie	i
 8001f94:	b661      	cpsie	f
 8001f96:	f3bf 8f4f 	dsb	sy
 8001f9a:	f3bf 8f6f 	isb	sy
 8001f9e:	df00      	svc	0
 8001fa0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001fa2:	bf00      	nop
 8001fa4:	e000ed08 	.word	0xe000ed08

08001fa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <xPortStartScheduler+0xcc>)
 8001fb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	22ff      	movs	r2, #255	; 0xff
 8001fbe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <xPortStartScheduler+0xd0>)
 8001fd4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <xPortStartScheduler+0xd4>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001fdc:	e009      	b.n	8001ff2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8001fde:	4b27      	ldr	r3, [pc, #156]	; (800207c <xPortStartScheduler+0xd4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	4a25      	ldr	r2, [pc, #148]	; (800207c <xPortStartScheduler+0xd4>)
 8001fe6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffa:	2b80      	cmp	r3, #128	; 0x80
 8001ffc:	d0ef      	beq.n	8001fde <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	; (800207c <xPortStartScheduler+0xd4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f1c3 0307 	rsb	r3, r3, #7
 8002006:	2b04      	cmp	r3, #4
 8002008:	d009      	beq.n	800201e <xPortStartScheduler+0x76>
 800200a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200e:	f383 8811 	msr	BASEPRI, r3
 8002012:	f3bf 8f6f 	isb	sy
 8002016:	f3bf 8f4f 	dsb	sy
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	e7fe      	b.n	800201c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <xPortStartScheduler+0xd4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	4a15      	ldr	r2, [pc, #84]	; (800207c <xPortStartScheduler+0xd4>)
 8002026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <xPortStartScheduler+0xd4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002030:	4a12      	ldr	r2, [pc, #72]	; (800207c <xPortStartScheduler+0xd4>)
 8002032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <xPortStartScheduler+0xd8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <xPortStartScheduler+0xd8>)
 8002042:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002048:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <xPortStartScheduler+0xd8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <xPortStartScheduler+0xd8>)
 800204e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002054:	f000 f8b0 	bl	80021b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <xPortStartScheduler+0xdc>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800205e:	f7ff ff93 	bl	8001f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002062:	f7ff fd73 	bl	8001b4c <vTaskSwitchContext>
	prvTaskExitError();
 8002066:	f7ff ff51 	bl	8001f0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	e000e400 	.word	0xe000e400
 8002078:	200003ac 	.word	0x200003ac
 800207c:	200003b0 	.word	0x200003b0
 8002080:	e000ed20 	.word	0xe000ed20
 8002084:	2000000c 	.word	0x2000000c

08002088 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	f3bf 8f4f 	dsb	sy
 800209e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <vPortEnterCritical+0x54>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <vPortEnterCritical+0x54>)
 80020a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <vPortEnterCritical+0x54>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d10e      	bne.n	80020d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <vPortEnterCritical+0x58>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d009      	beq.n	80020d0 <vPortEnterCritical+0x48>
 80020bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c0:	f383 8811 	msr	BASEPRI, r3
 80020c4:	f3bf 8f6f 	isb	sy
 80020c8:	f3bf 8f4f 	dsb	sy
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	e7fe      	b.n	80020ce <vPortEnterCritical+0x46>
	}
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	2000000c 	.word	0x2000000c
 80020e0:	e000ed04 	.word	0xe000ed04

080020e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <vPortExitCritical+0x48>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <vPortExitCritical+0x22>
 80020f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f6:	f383 8811 	msr	BASEPRI, r3
 80020fa:	f3bf 8f6f 	isb	sy
 80020fe:	f3bf 8f4f 	dsb	sy
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	e7fe      	b.n	8002104 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <vPortExitCritical+0x48>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3b01      	subs	r3, #1
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <vPortExitCritical+0x48>)
 800210e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <vPortExitCritical+0x48>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d104      	bne.n	8002122 <vPortExitCritical+0x3e>
 8002118:	2300      	movs	r3, #0
 800211a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	2000000c 	.word	0x2000000c

08002130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002130:	f3ef 8009 	mrs	r0, PSP
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <pxCurrentTCBConst>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002140:	6010      	str	r0, [r2, #0]
 8002142:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002146:	f04f 0050 	mov.w	r0, #80	; 0x50
 800214a:	f380 8811 	msr	BASEPRI, r0
 800214e:	f7ff fcfd 	bl	8001b4c <vTaskSwitchContext>
 8002152:	f04f 0000 	mov.w	r0, #0
 8002156:	f380 8811 	msr	BASEPRI, r0
 800215a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800215e:	6819      	ldr	r1, [r3, #0]
 8002160:	6808      	ldr	r0, [r1, #0]
 8002162:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002166:	f380 8809 	msr	PSP, r0
 800216a:	f3bf 8f6f 	isb	sy
 800216e:	4770      	bx	lr

08002170 <pxCurrentTCBConst>:
 8002170:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop

08002178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
	__asm volatile
 800217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002182:	f383 8811 	msr	BASEPRI, r3
 8002186:	f3bf 8f6f 	isb	sy
 800218a:	f3bf 8f4f 	dsb	sy
 800218e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002190:	f7ff fc20 	bl	80019d4 <xTaskIncrementTick>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <xPortSysTickHandler+0x3c>)
 800219c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	e000ed04 	.word	0xe000ed04

080021b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <vPortSetupTimerInterrupt+0x30>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <vPortSetupTimerInterrupt+0x34>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80021c8:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <vPortSetupTimerInterrupt+0x38>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <vPortSetupTimerInterrupt+0x3c>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	099b      	lsrs	r3, r3, #6
 80021d4:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <vPortSetupTimerInterrupt+0x40>)
 80021d6:	3b01      	subs	r3, #1
 80021d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80021da:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <vPortSetupTimerInterrupt+0x30>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	e000e010 	.word	0xe000e010
 80021ec:	e000e018 	.word	0xe000e018
 80021f0:	20000000 	.word	0x20000000
 80021f4:	10624dd3 	.word	0x10624dd3
 80021f8:	e000e014 	.word	0xe000e014

080021fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002208:	f7ff fb3a 	bl	8001880 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800220c:	4b57      	ldr	r3, [pc, #348]	; (800236c <pvPortMalloc+0x170>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002214:	f000 f90c 	bl	8002430 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002218:	4b55      	ldr	r3, [pc, #340]	; (8002370 <pvPortMalloc+0x174>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 808c 	bne.w	800233e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01c      	beq.n	8002266 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800222c:	2208      	movs	r2, #8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4413      	add	r3, r2
 8002232:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	2b00      	cmp	r3, #0
 800223c:	d013      	beq.n	8002266 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f023 0307 	bic.w	r3, r3, #7
 8002244:	3308      	adds	r3, #8
 8002246:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <pvPortMalloc+0x6a>
	__asm volatile
 8002252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	e7fe      	b.n	8002264 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d068      	beq.n	800233e <pvPortMalloc+0x142>
 800226c:	4b41      	ldr	r3, [pc, #260]	; (8002374 <pvPortMalloc+0x178>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	429a      	cmp	r2, r3
 8002274:	d863      	bhi.n	800233e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002276:	4b40      	ldr	r3, [pc, #256]	; (8002378 <pvPortMalloc+0x17c>)
 8002278:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800227a:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <pvPortMalloc+0x17c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002280:	e004      	b.n	800228c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	429a      	cmp	r2, r3
 8002294:	d903      	bls.n	800229e <pvPortMalloc+0xa2>
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f1      	bne.n	8002282 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800229e:	4b33      	ldr	r3, [pc, #204]	; (800236c <pvPortMalloc+0x170>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d04a      	beq.n	800233e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2208      	movs	r2, #8
 80022ae:	4413      	add	r3, r2
 80022b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	1ad2      	subs	r2, r2, r3
 80022c2:	2308      	movs	r3, #8
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d91e      	bls.n	8002308 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80022ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d009      	beq.n	80022f0 <pvPortMalloc+0xf4>
 80022dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e0:	f383 8811 	msr	BASEPRI, r3
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	e7fe      	b.n	80022ee <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	1ad2      	subs	r2, r2, r3
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002302:	69b8      	ldr	r0, [r7, #24]
 8002304:	f000 f8f6 	bl	80024f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <pvPortMalloc+0x178>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	4a18      	ldr	r2, [pc, #96]	; (8002374 <pvPortMalloc+0x178>)
 8002314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <pvPortMalloc+0x178>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <pvPortMalloc+0x180>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d203      	bcs.n	800232a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <pvPortMalloc+0x178>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a15      	ldr	r2, [pc, #84]	; (800237c <pvPortMalloc+0x180>)
 8002328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <pvPortMalloc+0x174>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	431a      	orrs	r2, r3
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800233e:	f7ff faad 	bl	800189c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <pvPortMalloc+0x164>
 800234c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002350:	f383 8811 	msr	BASEPRI, r3
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	e7fe      	b.n	800235e <pvPortMalloc+0x162>
	return pvReturn;
 8002360:	69fb      	ldr	r3, [r7, #28]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000fbc 	.word	0x20000fbc
 8002370:	20000fc8 	.word	0x20000fc8
 8002374:	20000fc0 	.word	0x20000fc0
 8002378:	20000fb4 	.word	0x20000fb4
 800237c:	20000fc4 	.word	0x20000fc4

08002380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d046      	beq.n	8002420 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002392:	2308      	movs	r3, #8
 8002394:	425b      	negs	r3, r3
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4413      	add	r3, r2
 800239a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	4b20      	ldr	r3, [pc, #128]	; (8002428 <vPortFree+0xa8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <vPortFree+0x42>
 80023ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b2:	f383 8811 	msr	BASEPRI, r3
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e7fe      	b.n	80023c0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <vPortFree+0x5e>
 80023ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	e7fe      	b.n	80023dc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <vPortFree+0xa8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d019      	beq.n	8002420 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d115      	bne.n	8002420 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <vPortFree+0xa8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	401a      	ands	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002404:	f7ff fa3c 	bl	8001880 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <vPortFree+0xac>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4413      	add	r3, r2
 8002412:	4a06      	ldr	r2, [pc, #24]	; (800242c <vPortFree+0xac>)
 8002414:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002416:	6938      	ldr	r0, [r7, #16]
 8002418:	f000 f86c 	bl	80024f4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800241c:	f7ff fa3e 	bl	800189c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002420:	bf00      	nop
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000fc8 	.word	0x20000fc8
 800242c:	20000fc0 	.word	0x20000fc0

08002430 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002436:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800243a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <prvHeapInit+0xac>)
 800243e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00c      	beq.n	8002464 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3307      	adds	r3, #7
 800244e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0307 	bic.w	r3, r3, #7
 8002456:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <prvHeapInit+0xac>)
 8002460:	4413      	add	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002468:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <prvHeapInit+0xb0>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <prvHeapInit+0xb0>)
 8002470:	2200      	movs	r2, #0
 8002472:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4413      	add	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800247c:	2208      	movs	r2, #8
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0307 	bic.w	r3, r3, #7
 800248a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <prvHeapInit+0xb4>)
 8002490:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <prvHeapInit+0xb4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2200      	movs	r2, #0
 8002498:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <prvHeapInit+0xb4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	1ad2      	subs	r2, r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <prvHeapInit+0xb4>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <prvHeapInit+0xb8>)
 80024be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a09      	ldr	r2, [pc, #36]	; (80024ec <prvHeapInit+0xbc>)
 80024c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <prvHeapInit+0xc0>)
 80024ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024ce:	601a      	str	r2, [r3, #0]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	200003b4 	.word	0x200003b4
 80024e0:	20000fb4 	.word	0x20000fb4
 80024e4:	20000fbc 	.word	0x20000fbc
 80024e8:	20000fc4 	.word	0x20000fc4
 80024ec:	20000fc0 	.word	0x20000fc0
 80024f0:	20000fc8 	.word	0x20000fc8

080024f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <prvInsertBlockIntoFreeList+0xa8>)
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e002      	b.n	8002508 <prvInsertBlockIntoFreeList+0x14>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	d8f7      	bhi.n	8002502 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	4413      	add	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	d108      	bne.n	8002536 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	441a      	add	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	441a      	add	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d118      	bne.n	800257c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <prvInsertBlockIntoFreeList+0xac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d00d      	beq.n	8002572 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	441a      	add	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e008      	b.n	8002584 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <prvInsertBlockIntoFreeList+0xac>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	e003      	b.n	8002584 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	d002      	beq.n	8002592 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	20000fb4 	.word	0x20000fb4
 80025a0:	20000fbc 	.word	0x20000fbc

080025a4 <__libc_init_array>:
 80025a4:	b570      	push	{r4, r5, r6, lr}
 80025a6:	2500      	movs	r5, #0
 80025a8:	4e0c      	ldr	r6, [pc, #48]	; (80025dc <__libc_init_array+0x38>)
 80025aa:	4c0d      	ldr	r4, [pc, #52]	; (80025e0 <__libc_init_array+0x3c>)
 80025ac:	1ba4      	subs	r4, r4, r6
 80025ae:	10a4      	asrs	r4, r4, #2
 80025b0:	42a5      	cmp	r5, r4
 80025b2:	d109      	bne.n	80025c8 <__libc_init_array+0x24>
 80025b4:	f000 f822 	bl	80025fc <_init>
 80025b8:	2500      	movs	r5, #0
 80025ba:	4e0a      	ldr	r6, [pc, #40]	; (80025e4 <__libc_init_array+0x40>)
 80025bc:	4c0a      	ldr	r4, [pc, #40]	; (80025e8 <__libc_init_array+0x44>)
 80025be:	1ba4      	subs	r4, r4, r6
 80025c0:	10a4      	asrs	r4, r4, #2
 80025c2:	42a5      	cmp	r5, r4
 80025c4:	d105      	bne.n	80025d2 <__libc_init_array+0x2e>
 80025c6:	bd70      	pop	{r4, r5, r6, pc}
 80025c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025cc:	4798      	blx	r3
 80025ce:	3501      	adds	r5, #1
 80025d0:	e7ee      	b.n	80025b0 <__libc_init_array+0xc>
 80025d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025d6:	4798      	blx	r3
 80025d8:	3501      	adds	r5, #1
 80025da:	e7f2      	b.n	80025c2 <__libc_init_array+0x1e>
 80025dc:	08002674 	.word	0x08002674
 80025e0:	08002674 	.word	0x08002674
 80025e4:	08002674 	.word	0x08002674
 80025e8:	08002678 	.word	0x08002678

080025ec <memset>:
 80025ec:	4603      	mov	r3, r0
 80025ee:	4402      	add	r2, r0
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d100      	bne.n	80025f6 <memset+0xa>
 80025f4:	4770      	bx	lr
 80025f6:	f803 1b01 	strb.w	r1, [r3], #1
 80025fa:	e7f9      	b.n	80025f0 <memset+0x4>

080025fc <_init>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	bf00      	nop
 8002600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002602:	bc08      	pop	{r3}
 8002604:	469e      	mov	lr, r3
 8002606:	4770      	bx	lr

08002608 <_fini>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	bf00      	nop
 800260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260e:	bc08      	pop	{r3}
 8002610:	469e      	mov	lr, r3
 8002612:	4770      	bx	lr
